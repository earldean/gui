From c2ca975430867202870fbcd23cb28c034ff6a6a9 Mon Sep 17 00:00:00 2001
From: Earl Dean <earldean@indiana.edu>
Date: Thu, 14 Jan 2016 13:18:39 -0500
Subject: [PATCH 3/3] aspell in progress

---
 gui-lib/framework/gui-utils.rkt      |  2 +-
 gui-lib/framework/private/aspell.rkt | 89 +++++++++++++++++++++++++++++-------
 2 files changed, 73 insertions(+), 18 deletions(-)

diff --git a/gui-lib/framework/gui-utils.rkt b/gui-lib/framework/gui-utils.rkt
index 2edfdf6..b167bb8 100644
--- a/gui-lib/framework/gui-utils.rkt
+++ b/gui-lib/framework/gui-utils.rkt
@@ -155,7 +155,7 @@
 
 (: ok/cancel-buttons (->* ((Instance Area-Container<%>)
                           (-> (Instance Button%) (Instance Event%) Any)
-                          (-> (Instance Button%) (Instance Event%) Any))
+                          (-> (Instance Button%) (Instance Event%) Any))sys
                           (String String #:confirm-style (Listof (U 'deleted 'border)))
                           (Values (Instance Button%) (Instance Button%))))
                          
diff --git a/gui-lib/framework/private/aspell.rkt b/gui-lib/framework/private/aspell.rkt
index 3bc9452..ce70975 100644
--- a/gui-lib/framework/private/aspell.rkt
+++ b/gui-lib/framework/private/aspell.rkt
@@ -1,10 +1,10 @@
-#lang racket/base
+#lang typed/racket/base
 (require racket/system
          racket/match
-         racket/contract
+         ;racket/contract
          racket/port
          string-constants)
-
+#;
 (provide/contract
  [query-aspell (->* ((and/c string? (not/c #rx"[\n]")))
                     ((or/c #f string?))
@@ -17,18 +17,29 @@
  [find-aspell-binary-path (-> (or/c path? #f))]
  [aspell-problematic? (-> (or/c string? #f))])
 
+
+(provide
+ find-aspell-binary-path 
+ get-aspell-dicts
+ query-aspell
+ aspell-problematic?)
+
+(: aspell-candidate-paths (Listof String))
 (define aspell-candidate-paths
   '("/usr/bin" 
     "/bin"
     "/usr/local/bin"
     "/opt/local/bin/"))
 
+(: find-aspell-binary-path (-> (U Path False)))
 (define (find-aspell-binary-path)
-  (define aspell (if (eq? (system-type) 'windows) "aspell.exe" "aspell"))
-  (define ispell (if (eq? (system-type) 'windows) "ispell.exe" "ispell"))
+  (define aspell (if (eq? (system-type 'os) 'windows) "aspell.exe" "aspell"))
+  (define ispell (if (eq? (system-type 'os) 'windows) "ispell.exe" "ispell"))
   (or (find-executable-path aspell)
       (find-executable-path ispell)
       (for/or ([cp aspell-candidate-paths])
+      (: c1 : Path)
+      (: c2 : Path)
         (define c1 (build-path cp aspell))
         (define c2 (build-path cp ispell))
         (or (and (file-exists? c1)
@@ -36,36 +47,52 @@
             (and (file-exists? c2)
                  c2)))))
 
+(: start-aspell
+      (-> Path (U (Listof String) False)
+                      (List Input-Port Output-Port Exact-Nonnegative-Integer Input-Port
+                       (-> (U 'status 'wait 'interrupt 'kill) Any))))
 (define (start-aspell asp dict)
+  (: aspell? : Boolean)
   (define aspell? (regexp-match? #rx"aspell" (path->string asp)))
   (apply process* asp 
          (append
           '("-a")
           (if dict
-              (list "-d" dict)
+              (list "-d" dict) 
               '())
           (if aspell? '("--encoding=utf-8") '()))))
 
+(: problematic : (U 'dont-know String False))
 (define problematic 'dont-know)
-(define (aspell-problematic?)
+(: aspell-problematic? (-> (U 'dont-know String False)))
+(define (aspell-problematic?) 
   (when (eq? problematic 'dont-know)
     (set! problematic (do-aspell-problematic))
     (asp-log (format "set problematic to ~s" problematic)))
   problematic)
 
+(: do-aspell-problematic (-> (U False String)))
 (define (do-aspell-problematic)
+  (: asp : (U Path False))
   (define asp (find-aspell-binary-path))
   (cond
     [(not asp)
      (string-constant cannot-find-ispell-or-aspell-path)]
     [else
+     (: proc-lst : (List Input-Port Output-Port Exact-Nonnegative-Integer Input-Port
+                       (-> (U 'status 'wait 'interrupt 'kill) Any)))
      (define proc-lst (start-aspell asp #f))
+     (: stdout : Input-Port) 
      (define stdout (list-ref proc-lst 0))
+     (: stderr : Input-Port)
      (define stderr (list-ref proc-lst 3))
-     (close-output-port (list-ref proc-lst 1)) ;; close stdin
+     (close-output-port ((inst list-ref (List Input-Port Output-Port Exact-Nonnegative-Integer Input-Port
+                       (-> (U 'status 'wait 'interrupt 'kill) Any))) proc-lst 1)) ;; close stdin
      (close-input-port stdout)
+     (: sp : Output-Port)
      (define sp (open-output-string))
      (copy-port stderr sp)
+     (: errmsg : String)
      (define errmsg (get-output-string sp))
      (close-input-port stderr)
      (cond
@@ -76,29 +103,41 @@
          errmsg)]
        [else #f])]))
 
+(: asp-logger : Logger)
 (define asp-logger (make-logger 'framework/aspell (current-logger)))
 (define-syntax-rule 
   (asp-log arg)
   (when (log-level? asp-logger 'debug)
     (asp-log/proc arg)))
+
+(: asp-log/proc (-> String Void))
 (define (asp-log/proc arg)
   (log-message asp-logger 'debug arg (current-continuation-marks)))
 
+(: aspell-req-chan : (Channelof (List String (U False (Listof String)) (Channelof Any) Any)))
 (define aspell-req-chan (make-channel))
+(: change-dict-chan : (Channelof (U False (Listof String))))
 (define change-dict-chan (make-channel))
+(: aspell-thread : (U Thread False))
 (define aspell-thread #f)
+(: start-aspell-thread (-> (U (-> Thread) Void)))
 (define (start-aspell-thread)
   (unless aspell-thread
     (set! aspell-thread
           (thread
-           (位 () 
+           (位 ()
+             (: aspell-proc (U False (List Input-Port Output-Port Exact-Nonnegative-Integer Input-Port
+                       (-> (U 'status 'wait 'interrupt 'kill) Any))))
              (define aspell-proc #f)
+             (: already-attempted-aspell? Boolean)
              (define already-attempted-aspell? #f)
+             (: current-dict (U False (Listof String)))
              (define current-dict #f)
              
              (define (fire-up-aspell)
                (unless already-attempted-aspell?
                  (set! already-attempted-aspell? #t)
+                 (: asp (U Path False))
                  (define asp (find-aspell-binary-path))
                  (when asp
                    (set! aspell-proc (start-aspell asp current-dict))
@@ -111,7 +150,7 @@
                      ;; put aspell in "terse" mode 
                      (display "!\n" (list-ref aspell-proc 1))
                      (flush-output (list-ref aspell-proc 1)))
-                   
+                   (: stderr : Input-Port)
                    (define stderr (list-ref aspell-proc 3))
                    (thread
                     (位 ()
@@ -121,7 +160,8 @@
                         (when (string? l)
                           (asp-log (format "aspell-proc stderr: ~a" l))
                           (loop))))))))
-             
+
+             (: shutdown-aspell (-> String Void))
              (define (shutdown-aspell why)
                (asp-log (format "aspell.rkt: shutdown connection to aspell: ~a" why))
                (define proc (list-ref aspell-proc 4))
@@ -133,7 +173,7 @@
              
              (let loop ()
                (sync
-                (handle-evt
+                ((inst handle-evt (List String (Listof String) (Channelof (Listof String)) (Evtof Any)) Void)
                  aspell-req-chan
                  (match-lambda
                    [(list line new-dict resp-chan nack-evt)
@@ -143,6 +183,8 @@
                         (set! already-attempted-aspell? #f))
                       (set! current-dict new-dict))
                     (unless aspell-proc (fire-up-aspell))
+                    ;; send the channel
+                    (: send-resp (-> (Listof String) Any))
                     (define (send-resp resp)
                       (sync (channel-put-evt resp-chan resp)
                             nack-evt))
@@ -201,13 +243,14 @@
                       [else (send-resp '())])
                     (loop)])))))))))
 
+(: query-aspell (->* [String] [(U False (Listof String))] Null))
 (define (query-aspell line [dict #f])
   (cond
     [(aspell-problematic?)
      '()]
     [else
      (when dict
-       (unless (member dict (get-aspell-dicts))
+       (unless ((inst member String) dict (assert (get-aspell-dicts)))
          (set! dict #f)))
      
      (start-aspell-thread)
@@ -215,22 +258,34 @@
       (nack-guard-evt
        (位 (nack-evt)
          (define resp (make-channel))
-         (channel-put aspell-req-chan (list line dict resp nack-evt))
+         ((inst channel-put (List String (U False (Listof String)) (Channelof Any) Any))
+          aspell-req-chan (list line dict resp nack-evt))
          resp)))]))
 
+(: aspell-dicts (U False (Listof String)))
 (define aspell-dicts #f)
+(: get-aspell-dicts (-> (U False (Listof String))))
 (define (get-aspell-dicts)
   (unless (aspell-problematic?)
     (unless aspell-dicts
       (define asp (find-aspell-binary-path))
-      (when (regexp-match? #rx"aspell" (path->string asp))
-        (define proc-lst (process* asp "dump" "dicts"))
+      (when (regexp-match? #rx"aspell" (path->string (assert asp)))
+        (: proc-lst (List Input-Port Output-Port Exact-Nonnegative-Integer Input-Port
+                       (case->
+                        [-> 'status (U 'running 'done-ok 'done-error)]
+                        [-> 'exit-code (U Byte False)]
+                        [-> 'wait AnyValues]
+                        [-> 'interrupt Void]
+                        [-> 'kill Void])))
+        (define proc-lst (process* (assert asp) "dump" "dicts"))
+        (: stdout Input-Port)
         (define stdout (list-ref proc-lst 0))
+        (: stderr Input-Port)
         (define stderr (list-ref proc-lst 3))
         (close-output-port (list-ref proc-lst 1)) ;; close stdin
         (close-input-port stderr)
         (set! aspell-dicts
-              (let loop ()
+              (let loop : (Listof String) ()
                 (define l (read-line stdout))
                 (cond
                   [(eof-object? l) '()]
-- 
1.8.4

