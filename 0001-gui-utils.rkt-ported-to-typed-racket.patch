From 30df05652395718c82c59df6a9d92702c70dcb7b Mon Sep 17 00:00:00 2001
From: Earl Dean <earldean@indiana.edu>
Date: Wed, 21 Oct 2015 18:22:21 -0400
Subject: [PATCH] gui-utils.rkt ported to typed racket

---
 gui-lib/framework/gui-utils.rkt | 159 ++++++++++++++++++++++++++++++----------
 1 file changed, 122 insertions(+), 37 deletions(-)

diff --git a/gui-lib/framework/gui-utils.rkt b/gui-lib/framework/gui-utils.rkt
index 544607c..2edfdf6 100644
--- a/gui-lib/framework/gui-utils.rkt
+++ b/gui-lib/framework/gui-utils.rkt
@@ -1,10 +1,35 @@
-#lang at-exp racket/base
+ #lang at-exp typed/racket/base
 
-(require string-constants racket/gui/base
-         racket/contract/base racket/class)
+(require string-constants typed/racket/gui/base
+         #;racket/contract/base typed/racket/class)
 (require scribble/srcdoc)
-(require/doc racket/base scribble/manual)
-
+(require/doc typed/racket/base scribble/manual)
+
+(require/typed racket/gui
+               [message-box/custom (->* [String String
+                                                (U String (Instance Bitmap%) False)
+                                                (U String (Instance Bitmap%) False)
+                                                (U String (Instance Bitmap%) False)]
+                                        [(U (Instance Frame%) (Instance Dialog%) False)
+                                        (Listof (U 'stop 'caution 'no-icon 'number-order 'disallow-close
+                                                   'no-default 'default=1 'default=2 'default=3))
+                                        (U Any False) 
+                                        #:dialog-mixin (Frame% . -> . Frame%)]
+                                        (U 1 2 3))]
+               [message+check-box/custom (->* [String String String
+                                                (U String (Instance Bitmap%) False)
+                                                (U String (Instance Bitmap%) False)
+                                                (U String (Instance Bitmap%) False)]
+                                        [(U (Instance Frame%) (Instance Dialog%) False)
+                                        (Listof (U 'stop 'caution 'no-icon 'number-order 'disallow-close
+                                                   'no-default 'default=1 'default=2 'default=3))
+                                        (U Any False) 
+                                        #:dialog-mixin (Frame% . -> . Frame%)]
+                                        (Values (U 1 2 3) Boolean))])
+                                                
+
+
+(: trim-string (-> String Positive-Integer String))
 (define (trim-string str size)
   (let ([str-size (string-length str)])
     (cond
@@ -29,37 +54,45 @@
                         (- str-size post-length)
                         str-size))]))])))
 
-
+(: maximum-string-label-length Positive-Integer)
 (define maximum-string-label-length 200)
 
 ;; format-literal-label: string any* -> string
+(: format-literal-label (-> String Any * String))
 (define (format-literal-label format-str . args)
   (quote-literal-label (apply format format-str args)))
 
 ;; quote-literal-label: string -> string
+(: quote-literal-label (-> String (#:quote-amp? Boolean) String))
 (define (quote-literal-label a-str #:quote-amp? [quote-amp? #t])
   (define quoted (if quote-amp?
                      (regexp-replace* #rx"(&)" a-str "\\1\\1")
                      a-str))
   (trim-string quoted maximum-string-label-length))
 
+
 ;; selected-text-color : color
+(: selected-text-color (U (Instance Color%) False))
 (define selected-text-color (send the-color-database find-color "black"))
 
 ;; unselected-text-color : color
-(define unselected-text-color (case (system-type)
+(: unselected-text-color (U (Instance Color%) False))
+(define unselected-text-color (case (system-type 'os)
                                 [(macosx) (make-object color% 75 75 75)]
                                 [else (send the-color-database find-color "black")]))
 
 ;; selected-brush : brush
+(: selected-brush (U (Instance Brush%) False))
 (define selected-brush (send the-brush-list find-or-create-brush "WHITE" 'solid))
 
 ;; unselected-brush : brush
+(: unselected-brush (U (Instance Brush%) False))
 (define unselected-brush (send the-brush-list find-or-create-brush (get-panel-background) 'solid))
 
 ;; button-down/over-brush : brush
+(: button-down/over-brush (U (Instance Brush%) False))
 (define button-down/over-brush 
-  (case (system-type)
+  (case (system-type 'os)
     [(macosx) (send the-brush-list find-or-create-brush
                     "light blue"
                     'solid)]
@@ -71,47 +104,62 @@
 
 ;; name-box-pen : pen
 ;; this pen draws the lines around each individual item
+(: name-box-pen (U (Instance Pen%) False))
 (define name-box-pen (send the-pen-list find-or-create-pen "black" 1 'solid))
 
 ;; background-brush : brush
 ;; this brush is set when drawing the background for the control
+(: background-brush (U (Instance Brush%) False))
 (define background-brush 
-  (case (system-type)
+  (case (system-type 'os)
     [(macosx) (send the-brush-list find-or-create-brush (get-panel-background) 'panel)]
     [else (send the-brush-list find-or-create-brush "white" 'solid)]))
 
 ;; background-pen : pen
 ;; this pen is set when drawing the background for the control
+(: background-pen (U (Instance Pen%) False))
 (define background-pen (send the-pen-list find-or-create-pen "black" 1 'transparent))
 
 ;; label-font : font
+(: label-font (U (Instance Font%) False))
 (define label-font (send the-font-list find-or-create-font
-                         (if (eq? (system-type) 'windows) 10 12)
+                         (if (eq? (system-type 'os) 'windows) 10 12)
                          'system 'normal
-                         (if (eq? (system-type) 'macosx) 'bold 'normal)
+                         (if (eq? (system-type 'os) 'macosx) 'bold 'normal)
                          #f))
 
 ;; name-gap : number
 ;; the space between each name
+(: name-gap Positive-Real)
 (define name-gap 4)
 
 ;; hang-over : number
 ;; the amount of space a single entry "slants" over
+(: hang-over Positive-Real)
 (define hang-over 8)
 
 ;; top-space : number
 ;; the gap at the top of the canvas, above all the choices
+(: top-space Positive-Real)
 (define top-space 4)
 
 ;; bottom-space : number
 ;; the extra space below the words
+(: bottom-space Positive-Real)
 (define bottom-space 2)
 
 ;; end choices-canvas%
 
+(: cancel-on-right? (-> Boolean))
 (define (cancel-on-right?) (system-position-ok-before-cancel?))
 
-(define (ok/cancel-buttons parent 
+(: ok/cancel-buttons (->* ((Instance Area-Container<%>)
+                          (-> (Instance Button%) (Instance Event%) Any)
+                          (-> (Instance Button%) (Instance Event%) Any))
+                          (String String #:confirm-style (Listof (U 'deleted 'border)))
+                          (Values (Instance Button%) (Instance Button%))))
+                         
+(define (ok/cancel-buttons parent ;; (: ok/cancel-buttons (Values (Instance Button%) (Instance Button%)))
                            confirm-callback
                            cancel-callback 
                            [confirm-str (string-constant ok)]
@@ -128,13 +176,13 @@
                     (parent parent)
                     (callback cancel-callback)
                     (label cancel-str)))])
-    (let-values ([(b1 b2)
+    (let-values ([(b1 b2) ;; let-values: ([([b1 : (Instance Brush%)] [b2 : (Instance Brush%)])
                   (cond
                     [(cancel-on-right?)
                      (values (confirm) (cancel))]
                     [else
                      (values (cancel) (confirm))])])
-      (let ([w (max (send b1 get-width)
+      (let ([w (max (send b1 get-width) ;; (let: ([[w : Real]
                     (send b2 get-width))])
         (send b1 min-width w)
         (send b2 min-width w)
@@ -142,31 +190,42 @@
             (values b1 b2)
             (values b2 b1))))))
 
-
+(: clickback-delta (Instance Style-Delta%))
 (define clickback-delta (make-object style-delta% 'change-underline #t))
+
+(: white-on-black-clickback-delta (Instance Style-Delta%))
 (define white-on-black-clickback-delta (make-object style-delta% 'change-underline #t))
 (let ()
   (send clickback-delta set-delta-foreground "BLUE")
   (send white-on-black-clickback-delta set-delta-foreground "deepskyblue")
   (void))
+
+(: get-clickback-delta (-> Boolean (Instance Style-Delta%)))
 (define get-clickback-delta
   (lambda ([white-on-black? #f])
     (if white-on-black? 
         white-on-black-clickback-delta
         clickback-delta)))
 
+(: clicked-clickback-delta (Instance Style-Delta%))
 (define clicked-clickback-delta (make-object style-delta%))
+
+(: white-on-black-clicked-clickback-delta (Instance Style-Delta%))
 (define white-on-black-clicked-clickback-delta (make-object style-delta%))
 (let ()
   (send clicked-clickback-delta set-delta-background "BLACK")
   (send white-on-black-clicked-clickback-delta set-delta-background "white")
   (void))
+
+(: get-clicked-clickback-delta (->* (Boolean) (Instance Style-Delta%)))
 (define get-clicked-clickback-delta
   (lambda ([white-on-black? #f])
     (if white-on-black? 
         white-on-black-clicked-clickback-delta
         clicked-clickback-delta)))
 
+;; case lambda 
+(: next-untitled-name (-> String))
 (define next-untitled-name
   (let ([n 1])
     (Î» ()
@@ -176,21 +235,25 @@
           [else (format (string-constant untitled-n) n)])
         (set! n (+ n 1))))))
 
+
+(: cursor-delay (case-> (-> Float) (-> Float Float)))
 (define cursor-delay
   (let ([x 0.25])
     (case-lambda
       [() x]
       [(v) (set! x v) x])))
 
+(: show-busy-cursor (->* ((-> Any)) [Real] Any)) 
 (define show-busy-cursor
   (lambda (thunk [delay (cursor-delay)])
     (local-busy-cursor #f thunk delay)))
 
+(: delay-action (-> Real (-> Void) (-> Void) (-> Void)))
 (define delay-action
   (Î» (delay-time open close)
-    (let ([semaphore (make-semaphore 1)]
-          [open? #f]
-          [skip-it? #f])
+    (let: ([semaphore : Semaphore (make-semaphore 1)]
+          [open? : Boolean #f]
+          [skip-it? : Boolean #f])
       (thread 
        (Î» ()
          (sleep delay-time)
@@ -206,16 +269,17 @@
           (close))
         (semaphore-post semaphore)))))
 
+(: local-busy-cursor (->* [(U False (Instance Window<%>)) (-> Any)] [Real] Any))
 (define local-busy-cursor
   (let ([watch (make-object cursor% 'watch)])
     (case-lambda
       [(win thunk) (local-busy-cursor win thunk (cursor-delay))]
       [(win thunk delay)
-       (let* ([old-cursor #f]
-              [cursor-off void])
+       (let*: ([old-cursor  : (U False (Instance Cursor%)) #f]
+              [cursor-off : (-> Void) void])
          (dynamic-wind
           (Î» ()
-            (set! cursor-off
+            (set! cursor-off 
                   (delay-action
                    delay
                    (Î» ()
@@ -228,51 +292,67 @@
                          (send win set-cursor old-cursor)
                          (end-busy-cursor))))))
           (Î» () (thunk))
-          (Î» () (cursor-off))))])))
+          (Î» () (assert (cursor-off)))))])))
 
+(: unsaved-warning (->* (String String)
+                       (Boolean (U (Instance Frame%) (Instance Dialog%) False) Boolean)
+                       (U 'continue 'save 'cancel)))
 (define (unsaved-warning filename action-anyway [can-save-now? #f] [parent #f] [cancel? #t])
-  (define key-closed #f)
+  (define: key-closed : (U False 'continue 'save 'cancel) #f)
+  
+  (: unsaved-warning-mixin (-> Frame% Frame%))
   (define (unsaved-warning-mixin %)
     (class %
       (inherit show)
+      (: on-subwindow-char (-> (Instance Window<%>) (Instance Key-Event%) Boolean))
       (define/override (on-subwindow-char receiver evt)
+        (: is-menu-key? (-> Char Boolean))
         (define (is-menu-key? char)
           (and (send evt get-meta-down)
                (equal? (send evt get-key-code) char)))
         (cond
           [(is-menu-key? #\d)
            (set! key-closed 'continue)
-           (show #f)]
+           (show #f)
+           #t] ;; #t here shouldn't be needed
           [(is-menu-key? #\s)
            (set! key-closed 'save)
-           (show #f)]
+           (show #f)
+           #t]
           [(is-menu-key? #\c)
            (set! key-closed 'cancel)
-           (show #f)]
+           (show #f)
+           #t]
           [else
            (super on-subwindow-char receiver evt)]))
-      (super-new)))
-  (define mb-res 
+      (super-new))) 
+
+  (define mb-res
     (message-box/custom 
-     (string-constant warning)
+     (string-constant warning) 
      (format (string-constant file-is-not-saved) filename)
      (string-constant save)
-     (and cancel? (string-constant cancel))
+     (and cancel? (string-constant cancel)) 
      action-anyway
      parent
      (if can-save-now?
-         '(default=1 caution)
+         '(default=1 caution) 
          '(default=2 caution))
      2
-     #:dialog-mixin (if (equal? (system-type) 'macosx)
+     #:dialog-mixin (if (equal? (system-type 'os) 'macosx)
                         unsaved-warning-mixin
-                        values)))
+                        values)))  
   (or key-closed
       (case mb-res
         [(1) 'save]
         [(2) 'cancel]
-        [(3) 'continue])))
+        [(3) 'continue]
+        [else (error 'FIXME)]))) ;; else case shouldn't be needed
 
+(: get-choice (->* (String String String)
+                  [String Any (U False (Instance Dialog%) (Instance Frame%))
+                   (U 'caution 'stop) (U False (case-> (-> Boolean Void) (-> Boolean))) String]
+                  Any))
 (define get-choice
   (lambda (message 
            true-choice
@@ -287,17 +367,20 @@
            [style  (if (eq? style 'app) `(default=1) `(default=1 ,style))]
            [style  (if (eq? 'disallow-close default-result)
                        (cons 'disallow-close style) style)]
+            ;; moved to if statment comment out below to parameter in 
+            ;; (return (messa-box/custom ... )call for type checker work around
+            #;
            [style  (if check? (cons 'checked style) style)]
            [return (Î» (mb-res) (case mb-res [(1) #t] [(2) #f] [else mb-res]))])
       (if checkbox-proc
           (let-values ([(mb-res checked)
                         (message+check-box/custom title message checkbox-label
                                                   true-choice false-choice #f
-                                                  parent style default-result)])
+                                                  parent style default-result)]) 
             (checkbox-proc checked)
             (return mb-res))
           (return (message-box/custom title message true-choice false-choice #f
-                                      parent style default-result))))))
+                                      parent (if check? (cons 'checked style) style) default-result))))))
 
 ;; manual renaming
 (define gui-utils:trim-string trim-string)
@@ -315,7 +398,7 @@
 (define gui-utils:cancel-on-right? cancel-on-right?)
 (define gui-utils:cursor-delay cursor-delay)
 
-
+#;
 (provide/doc
  (proc-doc
   gui-utils:trim-string
@@ -366,6 +449,8 @@
     Just returns what @racket[system-position-ok-before-cancel?] does.
     
     See also @racket[gui-utils:ok/cancel-buttons].})
+
+;; (: proc-doc/names (-> ))
  (proc-doc/names
   gui-utils:ok/cancel-buttons
   (->* ((is-a?/c area-container<%>)
-- 
1.8.4

